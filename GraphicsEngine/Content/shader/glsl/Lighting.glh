
#define MAX_LIGHTS 5
uniform int numLights;
uniform struct Light {
    vec3 position;
    vec3 Color;
	vec3 Direction;
	int type;//type 1 == point, type 0 == directional, tpye 2 == spot
	int ShadowID;
	int DirShadowID;
	int HasShadow;
	//sampler2D Shadowflat;
	//samplerCube shadowcubemap;
}allLights[MAX_LIGHTS];

vec3 CalculateColour(vec3 normal,vec3 lightdir,vec3 MaterialDiffuseColor,vec3 MaterialSpecularColor){
	float diffu = max(dot( normal,lightdir),0.0);//diffuse
	float spec  = 0.0f;	
	if(diffu > 0.0f){
		vec3 viewDir = normalize(viewPos - WorldPos);
		vec3 reflectDir = reflect(-lightdir, normal);  
		float spec = pow(max(dot(viewDir, reflectDir), 0.0f), 32);		
	}
	return (MaterialDiffuseColor * diffu) +( MaterialSpecularColor*spec);
}


